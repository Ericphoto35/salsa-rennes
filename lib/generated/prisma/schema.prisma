generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  password      String?
  phone         String?
  image         String?
  role          Role          @default(STUDENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  enrollments   Enrollment[]
  sessions      Session[]
  testimonials  Testimonial[]
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String
  level       Level
  dayOfWeek   Int
  startTime   String
  endTime     String
  price       Float
  location    String
  maxStudents Int
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  enrollments Enrollment[]
}

model Enrollment {
  id        String    @id @default(cuid())
  userId    String
  courseId  String
  startDate DateTime
  endDate   DateTime?
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  course    Course    @relation(fields: [courseId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([courseId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String
  imageUrl    String?
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  userId    String
  content   String
  rating    Int
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Level {
  DEBUTANT
  INTERMEDIAIRE
  AVANCE
}

enum Status {
  ACTIVE
  COMPLETED
  CANCELLED
}
